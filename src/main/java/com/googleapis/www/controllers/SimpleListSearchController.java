/*
 * YoutubeSearchLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package com.googleapis.www.controllers;

import com.googleapis.www.ApiHelper;
import com.googleapis.www.AuthManager;
import com.googleapis.www.Configuration;
import com.googleapis.www.exceptions.ApiException;
import com.googleapis.www.http.Headers;
import com.googleapis.www.http.client.HttpCallback;
import com.googleapis.www.http.client.HttpClient;
import com.googleapis.www.http.client.HttpContext;
import com.googleapis.www.http.request.HttpRequest;
import com.googleapis.www.http.response.HttpResponse;
import com.googleapis.www.http.response.HttpStringResponse;
import java.io.IOException;
import java.util.HashMap;
import java.util.Map;
import java.util.concurrent.CompletableFuture;

/**
 * This class lists all the endpoints of the groups.
 */
public final class SimpleListSearchController extends BaseController {

    /**
     * Initializes the controller.
     * @param config    Configurations added in client.
     * @param httpClient    Send HTTP requests and read the responses.
     * @param authManagers    Apply authorization to requests.
     */
    public SimpleListSearchController(Configuration config, HttpClient httpClient,
            Map<String, AuthManager> authManagers) {
        super(config, httpClient, authManagers);
    }

    /**
     * Initializes the controller with HTTPCallback.
     * @param config    Configurations added in client.
     * @param httpClient    Send HTTP requests and read the responses.
     * @param authManagers    Apply authorization to requests.
     * @param httpCallback    Callback to be called before and after the HTTP call.
     */
    public SimpleListSearchController(Configuration config, HttpClient httpClient,
            Map<String, AuthManager> authManagers, HttpCallback httpCallback) {
        super(config, httpClient, authManagers, httpCallback);
    }

    /**
     * Search API to search videos on Youtube based on a keyword.
     * @param  type  Required parameter: The part parameter specifies a comma-separated list of one
     *         or more search resource properties that the API response will include. Set the
     *         parameter value to snippet.
     * @param  q  Required parameter: Keyword.
     * @param  key  Required parameter: auth key
     * @param  accept  Required parameter: Example:
     * @return    Returns the String response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public String search(
            final String type,
            final String q,
            final String key,
            final String accept) throws ApiException, IOException {
        HttpRequest request = buildSearchRequest(type, q, key, accept);
        HttpResponse response = getClientInstance().execute(request, false);
        HttpContext context = new HttpContext(request, response);

        return handleSearchResponse(context);
    }

    /**
     * Search API to search videos on Youtube based on a keyword.
     * @param  type  Required parameter: The part parameter specifies a comma-separated list of one
     *         or more search resource properties that the API response will include. Set the
     *         parameter value to snippet.
     * @param  q  Required parameter: Keyword.
     * @param  key  Required parameter: auth key
     * @param  accept  Required parameter: Example:
     * @return    Returns the String response from the API call
     */
    public CompletableFuture<String> searchAsync(
            final String type,
            final String q,
            final String key,
            final String accept) {
        return makeHttpCallAsync(() -> buildSearchRequest(type, q, key, accept),
            request -> getClientInstance().executeAsync(request, false),
            context -> handleSearchResponse(context));
    }

    /**
     * Builds the HttpRequest object for search.
     */
    private HttpRequest buildSearchRequest(
            final String type,
            final String q,
            final String key,
            final String accept) {
        //the base uri for api requests
        String baseUri = config.getBaseUri();

        //prepare query string for API call
        final StringBuilder queryBuilder = new StringBuilder(baseUri
                + "/search");

        //load all query parameters
        Map<String, Object> queryParameters = new HashMap<>();
        queryParameters.put("type", type);
        queryParameters.put("q", q);
        queryParameters.put("key", key);

        //load all headers for the outgoing API request
        Headers headers = new Headers();
        headers.add("Accept", accept);
        headers.add("user-agent", BaseController.userAgent);

        //prepare and invoke the API call request to fetch the response
        HttpRequest request = getClientInstance().get(queryBuilder, headers, queryParameters,
                null);

        // Invoke the callback before request if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onBeforeRequest(request);
        }

        return request;
    }

    /**
     * Processes the response for search.
     * @return An object of type String
     */
    private String handleSearchResponse(
            HttpContext context) throws ApiException, IOException {
        HttpResponse response = context.getResponse();

        //invoke the callback after response if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onAfterResponse(context);
        }

        //handle errors defined at the API level
        validateResponse(response, context);

        //extract result from the http response
        String result = ((HttpStringResponse) response).getBody();
        return result;
    }

}