/*
 * YoutubeSearchLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package com.googleapis.www.controllers;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertNotNull;
import static org.junit.Assert.assertTrue;

import com.googleapis.www.YoutubeSearchClient;
import com.googleapis.www.exceptions.ApiException;
import com.googleapis.www.testing.TestHelper;
import java.util.LinkedHashMap;
import java.util.Map;
import org.junit.AfterClass;
import org.junit.BeforeClass;
import org.junit.Test;

public class SimpleListSearchControllerTest extends BaseControllerTest {

    /**
     * Client instance.
     */
    private static YoutubeSearchClient client;
    
    /**
     * Controller instance (for all tests).
     */
    private static SimpleListSearchController controller;

    /**
     * Setup test class.
     */
    @BeforeClass
    public static void setUpClass() {
        client = createConfiguration();
        controller = client.getSimpleListSearchController();
    }

    /**
     * Tear down test class.
     */
    @AfterClass
    public static void tearDownClass() {
        controller = null;
    }

    /**
     * Search API to search videos on Youtube based on a keyword.
     * @throws Throwable exception if occurs.
     */
    @Test
    public void testSearch() throws Exception {
        // Parameters for the API call
        String type = 
                "video";
        String q = 
                "surfing";
        String key = 
                "AIzaSyAp3aGvE_woRhDfY5i8MtzASxP9gSuEkHM";
        String accept = 
                "application/json";

        // Set callback and perform API call
        String result = null;
        try {
            result = controller.search(type, q, key, accept);
        } catch (ApiException e) {
            // Empty block
        }

        // Test whether the response is null
        assertNotNull("Response is null", 
                httpResponse.getResponse());
        // Test response code
        assertEquals("Status is not 200", 
                200, httpResponse.getResponse().getStatusCode());

        // Test headers
        Map<String, String> headers = new LinkedHashMap<String, String>();
        headers.put("Content-Type", TestHelper.nullString);
        
        assertTrue("Headers do not match", TestHelper.areHeadersProperSubsetOf(
                headers, httpResponse.getResponse().getHeaders().asSimpleMap(), true));

        // Test whether the captured response is as we expected
        assertNotNull("Result does not exist", 
                result);
        assertEquals("Response body does not match exactly",
                "list",
                TestHelper.convertStreamToString(httpResponse.getResponse().getRawBody()));
    }

}
